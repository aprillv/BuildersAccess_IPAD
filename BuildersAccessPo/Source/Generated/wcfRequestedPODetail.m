/*
	wcfRequestedPODetail.h
	The implementation of properties and methods for the wcfRequestedPODetail object.
	Generated by SudzC.com
*/
#import "wcfRequestedPODetail.h"

#import "wcfArrayOfRequestedPO2Item.h"
@implementation wcfRequestedPODetail
	@synthesize BtnApprove = _BtnApprove;
	@synthesize BtnDisapprove = _BtnDisapprove;
	@synthesize BtnHold = _BtnHold;
	@synthesize BtnVoid = _BtnVoid;
	@synthesize CostCode = _CostCode;
	@synthesize DeliveryDate = _DeliveryDate;
	@synthesize Fs = _Fs;
	@synthesize Notes = _Notes;
	@synthesize PO2Ls = _PO2Ls;
	@synthesize Poauthlimit = _Poauthlimit;
	@synthesize Proejct = _Proejct;
	@synthesize RequestedBy = _RequestedBy;
	@synthesize Status = _Status;
	@synthesize Taxrate = _Taxrate;
	@synthesize Total = _Total;
	@synthesize Vendor = _Vendor;
	@synthesize extension = _extension;

	- (id) init
	{
		if(self = [super init])
		{
			self.BtnApprove = nil;
			self.BtnDisapprove = nil;
			self.BtnHold = nil;
			self.BtnVoid = nil;
			self.CostCode = nil;
			self.DeliveryDate = nil;
			self.Fs = nil;
			self.Notes = nil;
			self.PO2Ls = [[[NSMutableArray alloc] init] autorelease];
			self.Poauthlimit = nil;
			self.Proejct = nil;
			self.RequestedBy = nil;
			self.Status = nil;
			self.Taxrate = nil;
			self.Total = nil;
			self.Vendor = nil;
			self.extension = nil;

		}
		return self;
	}

	+ (wcfRequestedPODetail*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (wcfRequestedPODetail*)[[[wcfRequestedPODetail alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.BtnApprove = [Soap getNodeValue: node withName: @"BtnApprove"];
			self.BtnDisapprove = [Soap getNodeValue: node withName: @"BtnDisapprove"];
			self.BtnHold = [Soap getNodeValue: node withName: @"BtnHold"];
			self.BtnVoid = [Soap getNodeValue: node withName: @"BtnVoid"];
			self.CostCode = [Soap getNodeValue: node withName: @"CostCode"];
			self.DeliveryDate = [Soap getNodeValue: node withName: @"DeliveryDate"];
			self.Fs = [Soap getNodeValue: node withName: @"Fs"];
			self.Notes = [Soap getNodeValue: node withName: @"Notes"];
			self.PO2Ls = [[wcfArrayOfRequestedPO2Item newWithNode: [Soap getNode: node withName: @"PO2Ls"]] object];
			self.Poauthlimit = [Soap getNodeValue: node withName: @"Poauthlimit"];
			self.Proejct = [Soap getNodeValue: node withName: @"Proejct"];
			self.RequestedBy = [Soap getNodeValue: node withName: @"RequestedBy"];
			self.Status = [Soap getNodeValue: node withName: @"Status"];
			self.Taxrate = [Soap getNodeValue: node withName: @"Taxrate"];
			self.Total = [Soap getNodeValue: node withName: @"Total"];
			self.Vendor = [Soap getNodeValue: node withName: @"Vendor"];
			self.extension = [Soap getNodeValue: node withName: @"extension"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"RequestedPODetail"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.BtnApprove != nil) [s appendFormat: @"<BtnApprove>%@</BtnApprove>", [[self.BtnApprove stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.BtnDisapprove != nil) [s appendFormat: @"<BtnDisapprove>%@</BtnDisapprove>", [[self.BtnDisapprove stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.BtnHold != nil) [s appendFormat: @"<BtnHold>%@</BtnHold>", [[self.BtnHold stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.BtnVoid != nil) [s appendFormat: @"<BtnVoid>%@</BtnVoid>", [[self.BtnVoid stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CostCode != nil) [s appendFormat: @"<CostCode>%@</CostCode>", [[self.CostCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.DeliveryDate != nil) [s appendFormat: @"<DeliveryDate>%@</DeliveryDate>", [[self.DeliveryDate stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Fs != nil) [s appendFormat: @"<Fs>%@</Fs>", [[self.Fs stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Notes != nil) [s appendFormat: @"<Notes>%@</Notes>", [[self.Notes stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PO2Ls != nil && self.PO2Ls.count > 0) {
			[s appendFormat: @"<PO2Ls>%@</PO2Ls>", [wcfArrayOfRequestedPO2Item serialize: self.PO2Ls]];
		} else {
			[s appendString: @"<PO2Ls/>"];
		}
		if (self.Poauthlimit != nil) [s appendFormat: @"<Poauthlimit>%@</Poauthlimit>", [[self.Poauthlimit stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Proejct != nil) [s appendFormat: @"<Proejct>%@</Proejct>", [[self.Proejct stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.RequestedBy != nil) [s appendFormat: @"<RequestedBy>%@</RequestedBy>", [[self.RequestedBy stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Status != nil) [s appendFormat: @"<Status>%@</Status>", [[self.Status stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Taxrate != nil) [s appendFormat: @"<Taxrate>%@</Taxrate>", [[self.Taxrate stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Total != nil) [s appendFormat: @"<Total>%@</Total>", [[self.Total stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Vendor != nil) [s appendFormat: @"<Vendor>%@</Vendor>", [[self.Vendor stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.extension != nil) [s appendFormat: @"<extension>%@</extension>", [[self.extension stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[wcfRequestedPODetail class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.BtnApprove != nil) { [self.BtnApprove release]; }
		if(self.BtnDisapprove != nil) { [self.BtnDisapprove release]; }
		if(self.BtnHold != nil) { [self.BtnHold release]; }
		if(self.BtnVoid != nil) { [self.BtnVoid release]; }
		if(self.CostCode != nil) { [self.CostCode release]; }
		if(self.DeliveryDate != nil) { [self.DeliveryDate release]; }
		if(self.Fs != nil) { [self.Fs release]; }
		if(self.Notes != nil) { [self.Notes release]; }
		if(self.PO2Ls != nil) { [self.PO2Ls release]; }
		if(self.Poauthlimit != nil) { [self.Poauthlimit release]; }
		if(self.Proejct != nil) { [self.Proejct release]; }
		if(self.RequestedBy != nil) { [self.RequestedBy release]; }
		if(self.Status != nil) { [self.Status release]; }
		if(self.Taxrate != nil) { [self.Taxrate release]; }
		if(self.Total != nil) { [self.Total release]; }
		if(self.Vendor != nil) { [self.Vendor release]; }
		if(self.extension != nil) { [self.extension release]; }
		[super dealloc];
	}

@end
