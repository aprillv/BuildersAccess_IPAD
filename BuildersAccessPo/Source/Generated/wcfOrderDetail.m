/*
	wcfOrderDetail.h
	The implementation of properties and methods for the wcfOrderDetail object.
	Generated by SudzC.com
*/
#import "wcfOrderDetail.h"

@implementation wcfOrderDetail
	@synthesize Amount = _Amount;
	@synthesize Description = _Description;
	@synthesize Hand = _Hand;
	@synthesize Notes = _Notes;
	@synthesize Price = _Price;
	@synthesize Qty = _Qty;
	@synthesize Unit = _Unit;

	- (id) init
	{
		if(self = [super init])
		{
			self.Amount = nil;
			self.Description = nil;
			self.Hand = nil;
			self.Notes = nil;
			self.Price = nil;
			self.Qty = nil;
			self.Unit = nil;

		}
		return self;
	}

	+ (wcfOrderDetail*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (wcfOrderDetail*)[[[wcfOrderDetail alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Amount = [Soap getNodeValue: node withName: @"Amount"];
			self.Description = [Soap getNodeValue: node withName: @"Description"];
			self.Hand = [Soap getNodeValue: node withName: @"Hand"];
			self.Notes = [Soap getNodeValue: node withName: @"Notes"];
			self.Price = [Soap getNodeValue: node withName: @"Price"];
			self.Qty = [Soap getNodeValue: node withName: @"Qty"];
			self.Unit = [Soap getNodeValue: node withName: @"Unit"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"OrderDetail"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.Amount != nil) [s appendFormat: @"<Amount>%@</Amount>", [[self.Amount stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Description != nil) [s appendFormat: @"<Description>%@</Description>", [[self.Description stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Hand != nil) [s appendFormat: @"<Hand>%@</Hand>", [[self.Hand stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Notes != nil) [s appendFormat: @"<Notes>%@</Notes>", [[self.Notes stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Price != nil) [s appendFormat: @"<Price>%@</Price>", [[self.Price stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Qty != nil) [s appendFormat: @"<Qty>%@</Qty>", [[self.Qty stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Unit != nil) [s appendFormat: @"<Unit>%@</Unit>", [[self.Unit stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[wcfOrderDetail class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.Amount != nil) { [self.Amount release]; }
		if(self.Description != nil) { [self.Description release]; }
		if(self.Hand != nil) { [self.Hand release]; }
		if(self.Notes != nil) { [self.Notes release]; }
		if(self.Price != nil) { [self.Price release]; }
		if(self.Qty != nil) { [self.Qty release]; }
		if(self.Unit != nil) { [self.Unit release]; }
		[super dealloc];
	}

@end
