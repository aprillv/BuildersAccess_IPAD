/*
	wcfCalendarEntryItem.h
	The implementation of properties and methods for the wcfCalendarEntryItem object.
	Generated by SudzC.com
*/
#import "wcfCalendarEntryItem.h"

@implementation wcfCalendarEntryItem
	@synthesize ContactName = _ContactName;
	@synthesize CreateBy = _CreateBy;
	@synthesize DailyCharge = _DailyCharge;
	@synthesize DailyChargeReadOnly = _DailyChargeReadOnly;
	@synthesize DisApprove = _DisApprove;
	@synthesize Email = _Email;
	@synthesize EndTime = _EndTime;
	@synthesize Location = _Location;
	@synthesize MApprove = _MApprove;
	@synthesize MEvent = _MEvent;
	@synthesize Mobile = _Mobile;
	@synthesize Notes = _Notes;
	@synthesize Phone = _Phone;
	@synthesize StartTime = _StartTime;
	@synthesize Subject = _Subject;
	@synthesize SubjectReadOnly = _SubjectReadOnly;
	@synthesize TDate = _TDate;
	@synthesize ToEmail = _ToEmail;
	@synthesize ToMessage = _ToMessage;
	@synthesize ToName = _ToName;
	@synthesize ToSubject = _ToSubject;

	- (id) init
	{
		if(self = [super init])
		{
			self.ContactName = nil;
			self.CreateBy = nil;
			self.DailyCharge = nil;
			self.Email = nil;
			self.EndTime = nil;
			self.Location = nil;
			self.MEvent = nil;
			self.Mobile = nil;
			self.Notes = nil;
			self.Phone = nil;
			self.StartTime = nil;
			self.Subject = nil;
			self.TDate = nil;
			self.ToEmail = nil;
			self.ToMessage = nil;
			self.ToName = nil;
			self.ToSubject = nil;

		}
		return self;
	}

	+ (wcfCalendarEntryItem*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (wcfCalendarEntryItem*)[[[wcfCalendarEntryItem alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.ContactName = [Soap getNodeValue: node withName: @"ContactName"];
			self.CreateBy = [Soap getNodeValue: node withName: @"CreateBy"];
			self.DailyCharge = [Soap getNodeValue: node withName: @"DailyCharge"];
			self.DailyChargeReadOnly = [[Soap getNodeValue: node withName: @"DailyChargeReadOnly"] boolValue];
			self.DisApprove = [[Soap getNodeValue: node withName: @"DisApprove"] boolValue];
			self.Email = [Soap getNodeValue: node withName: @"Email"];
			self.EndTime = [Soap getNodeValue: node withName: @"EndTime"];
			self.Location = [Soap getNodeValue: node withName: @"Location"];
			self.MApprove = [[Soap getNodeValue: node withName: @"MApprove"] boolValue];
			self.MEvent = [Soap getNodeValue: node withName: @"MEvent"];
			self.Mobile = [Soap getNodeValue: node withName: @"Mobile"];
			self.Notes = [Soap getNodeValue: node withName: @"Notes"];
			self.Phone = [Soap getNodeValue: node withName: @"Phone"];
			self.StartTime = [Soap getNodeValue: node withName: @"StartTime"];
			self.Subject = [Soap getNodeValue: node withName: @"Subject"];
			self.SubjectReadOnly = [[Soap getNodeValue: node withName: @"SubjectReadOnly"] boolValue];
			self.TDate = [Soap getNodeValue: node withName: @"TDate"];
			self.ToEmail = [Soap getNodeValue: node withName: @"ToEmail"];
			self.ToMessage = [Soap getNodeValue: node withName: @"ToMessage"];
			self.ToName = [Soap getNodeValue: node withName: @"ToName"];
			self.ToSubject = [Soap getNodeValue: node withName: @"ToSubject"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"CalendarEntryItem"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.ContactName != nil) [s appendFormat: @"<ContactName>%@</ContactName>", [[self.ContactName stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CreateBy != nil) [s appendFormat: @"<CreateBy>%@</CreateBy>", [[self.CreateBy stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.DailyCharge != nil) [s appendFormat: @"<DailyCharge>%@</DailyCharge>", [[self.DailyCharge stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<DailyChargeReadOnly>%@</DailyChargeReadOnly>", (self.DailyChargeReadOnly)?@"true":@"false"];
		[s appendFormat: @"<DisApprove>%@</DisApprove>", (self.DisApprove)?@"true":@"false"];
		if (self.Email != nil) [s appendFormat: @"<Email>%@</Email>", [[self.Email stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EndTime != nil) [s appendFormat: @"<EndTime>%@</EndTime>", [[self.EndTime stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Location != nil) [s appendFormat: @"<Location>%@</Location>", [[self.Location stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<MApprove>%@</MApprove>", (self.MApprove)?@"true":@"false"];
		if (self.MEvent != nil) [s appendFormat: @"<MEvent>%@</MEvent>", [[self.MEvent stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Mobile != nil) [s appendFormat: @"<Mobile>%@</Mobile>", [[self.Mobile stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Notes != nil) [s appendFormat: @"<Notes>%@</Notes>", [[self.Notes stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Phone != nil) [s appendFormat: @"<Phone>%@</Phone>", [[self.Phone stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.StartTime != nil) [s appendFormat: @"<StartTime>%@</StartTime>", [[self.StartTime stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Subject != nil) [s appendFormat: @"<Subject>%@</Subject>", [[self.Subject stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<SubjectReadOnly>%@</SubjectReadOnly>", (self.SubjectReadOnly)?@"true":@"false"];
		if (self.TDate != nil) [s appendFormat: @"<TDate>%@</TDate>", [[self.TDate stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ToEmail != nil) [s appendFormat: @"<ToEmail>%@</ToEmail>", [[self.ToEmail stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ToMessage != nil) [s appendFormat: @"<ToMessage>%@</ToMessage>", [[self.ToMessage stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ToName != nil) [s appendFormat: @"<ToName>%@</ToName>", [[self.ToName stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ToSubject != nil) [s appendFormat: @"<ToSubject>%@</ToSubject>", [[self.ToSubject stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[wcfCalendarEntryItem class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.ContactName != nil) { [self.ContactName release]; }
		if(self.CreateBy != nil) { [self.CreateBy release]; }
		if(self.DailyCharge != nil) { [self.DailyCharge release]; }
		if(self.Email != nil) { [self.Email release]; }
		if(self.EndTime != nil) { [self.EndTime release]; }
		if(self.Location != nil) { [self.Location release]; }
		if(self.MEvent != nil) { [self.MEvent release]; }
		if(self.Mobile != nil) { [self.Mobile release]; }
		if(self.Notes != nil) { [self.Notes release]; }
		if(self.Phone != nil) { [self.Phone release]; }
		if(self.StartTime != nil) { [self.StartTime release]; }
		if(self.Subject != nil) { [self.Subject release]; }
		if(self.TDate != nil) { [self.TDate release]; }
		if(self.ToEmail != nil) { [self.ToEmail release]; }
		if(self.ToMessage != nil) { [self.ToMessage release]; }
		if(self.ToName != nil) { [self.ToName release]; }
		if(self.ToSubject != nil) { [self.ToSubject release]; }
		[super dealloc];
	}

@end
