/*
	wcfCalendarItem.h
	The implementation of properties and methods for the wcfCalendarItem object.
	Generated by SudzC.com
*/
#import "wcfCalendarItem.h"

@implementation wcfCalendarItem
	@synthesize By = _By;
	@synthesize IDNumber = _IDNumber;
	@synthesize Original = _Original;
	@synthesize Reason = _Reason;
	@synthesize Requested = _Requested;
	@synthesize Reschedule = _Reschedule;
	@synthesize Subject = _Subject;

	- (id) init
	{
		if(self = [super init])
		{
			self.By = nil;
			self.IDNumber = nil;
			self.Original = nil;
			self.Reason = nil;
			self.Requested = nil;
			self.Reschedule = nil;
			self.Subject = nil;

		}
		return self;
	}

	+ (wcfCalendarItem*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (wcfCalendarItem*)[[[wcfCalendarItem alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.By = [Soap getNodeValue: node withName: @"By"];
			self.IDNumber = [Soap getNodeValue: node withName: @"IDNumber"];
			self.Original = [Soap getNodeValue: node withName: @"Original"];
			self.Reason = [Soap getNodeValue: node withName: @"Reason"];
			self.Requested = [Soap getNodeValue: node withName: @"Requested"];
			self.Reschedule = [Soap getNodeValue: node withName: @"Reschedule"];
			self.Subject = [Soap getNodeValue: node withName: @"Subject"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"CalendarItem"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.By != nil) [s appendFormat: @"<By>%@</By>", [[self.By stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.IDNumber != nil) [s appendFormat: @"<IDNumber>%@</IDNumber>", [[self.IDNumber stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Original != nil) [s appendFormat: @"<Original>%@</Original>", [[self.Original stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Reason != nil) [s appendFormat: @"<Reason>%@</Reason>", [[self.Reason stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Requested != nil) [s appendFormat: @"<Requested>%@</Requested>", [[self.Requested stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Reschedule != nil) [s appendFormat: @"<Reschedule>%@</Reschedule>", [[self.Reschedule stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Subject != nil) [s appendFormat: @"<Subject>%@</Subject>", [[self.Subject stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[wcfCalendarItem class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.By != nil) { [self.By release]; }
		if(self.IDNumber != nil) { [self.IDNumber release]; }
		if(self.Original != nil) { [self.Original release]; }
		if(self.Reason != nil) { [self.Reason release]; }
		if(self.Requested != nil) { [self.Requested release]; }
		if(self.Reschedule != nil) { [self.Reschedule release]; }
		if(self.Subject != nil) { [self.Subject release]; }
		[super dealloc];
	}

@end
